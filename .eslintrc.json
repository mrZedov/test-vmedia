{
  "root": true,
  "ignorePatterns": [
    "migrations/*.ts"
  ],
  "plugins": [
    "@nrwl/nx",
    "prettier",
    "sql",
    "import"
  ],
  "overrides": [
    {
      "files": [
        "*.ts",
        "*.tsx",
        "*.js",
        "*.jsx"
      ],
      "parserOptions": {
        "project": [
          "tsconfig.json"
        ],
        "createDefaultProgram": true
      },
      "extends": [
        "plugin:@nrwl/nx/typescript",
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:@typescript-eslint/recommended-requiring-type-checking",
        "plugin:prettier/recommended",
        "plugin:rxjs/recommended",
        "plugin:import/recommended"
      ],
      "rules": {
        //        "arrow-body-style": [
        //          "error",
        //          "as-needed"
        //        ],
        "import/order": [
          "error",
          {
            "groups": [
              "builtin",
              "external",
              "internal",
              "parent",
              "sibling",
              "index"
            ],
            "newlines-between": "always"
          }
        ],
        "arrow-body-style": "off",
        "prefer-arrow-callback": "off",
        "prettier/prettier": [
          "error",
          {
            "printWidth": 150
          },
          {
            "usePrettierrc": true
          }
        ],
        "sql/format": [
          "error",
          {
            "ignoreBaseIndent": false,
            "ignoreExpressions": false,
            "ignoreInline": false,
            "ignoreTagless": false,
            "ignoreStartWithNewLine": true
          },
          {
            "noRcFile": true,
            "keywordCase": "uppercase",
            "functionCase": "uppercase",
            "spaces": 2
          }
        ],
        "sql/no-unsafe-query": [
          "error",
          {
            "allowLiteral": true
          }
        ],
        "comma-dangle": [
          "error",
          {
            "arrays": "always-multiline",
            "objects": "always-multiline",
            "imports": "always-multiline",
            "exports": "always-multiline",
            "functions": "never"
          }
        ],
        "max-len": [
          "error",
          {
            "ignorePattern": "^import [^,]+ from |^export | implements | eslint-disable",
            "code": 150
          }
        ],
        "@typescript-eslint/explicit-module-boundary-types": "error",
        "@typescript-eslint/explicit-member-accessibility": [
          "error",
          {
            "accessibility": "explicit",
            "overrides": {
              "methods": "explicit",
              "constructors": "no-public",
              "properties": "explicit"
            }
          }
        ],
        "@typescript-eslint/array-type": [
          "error",
          {
            "default": "array"
          }
        ],
        "@typescript-eslint/consistent-type-assertions": [
          "error",
          {
            "assertionStyle": "as",
            "objectLiteralTypeAssertions": "allow-as-parameter"
          }
        ],
        "@typescript-eslint/dot-notation": "error",
        "@typescript-eslint/indent": "off",
        "@typescript-eslint/no-unsafe-assignment": "off",
        "@typescript-eslint/member-delimiter-style": [
          "error",
          {
            "multiline": {
              "delimiter": "semi",
              "requireLast": true
            },
            "singleline": {
              "delimiter": "semi",
              "requireLast": false
            }
          }
        ],
        "@typescript-eslint/member-ordering": [
          "error",
          {
            "default": [
              "signature",
              "public-decorated-field",
              "public-field",
              "protected-decorated-field",
              "protected-field",
              "private-decorated-field",
              "private-field",
              "constructor",
              "decorated-method",
              "static-method",
              "instance-method",
              "abstract-method",
              "method"
            ]
          }
        ],
        "@typescript-eslint/naming-convention": [
          "error",
          {
            "selector": "objectLiteralProperty",
            "format": [
              "UPPER_CASE",
              "camelCase"
            ],
            "filter": {
              "regex": "(?!headers$|ngsw-bypass|X-Requested-With|download-filename|_method)",
              "match": false
            }
          },
          {
            "selector": "classProperty",
            "format": [
              "camelCase"
            ]
          },
          {
            "selector": "classProperty",
            "modifiers": [
              "static"
            ],
            "format": [
              "UPPER_CASE"
            ]
          },
          {
            "selector": "classProperty",
            "modifiers": [
              "readonly"
            ],
            "format": [
              "UPPER_CASE",
              "PascalCase",
              "camelCase"
            ]
          },
          {
            "selector": "classProperty",
            "modifiers": [
              "readonly"
            ],
            "format": [
              "UPPER_CASE",
              "PascalCase"
            ]
          },
          {
            "selector": "variable",
            "format": [
              "UPPER_CASE",
              "camelCase",
              "PascalCase"
            ]
          },
          {
            "selector": [
              "enum",
              "interface",
              "class",
              "enumMember",
              "typeAlias"
            ],
            "format": [
              "PascalCase"
            ]
          },
          {
            "selector": [
              "enumMember"
            ],
            "format": [
              "camelCase"
            ]
          }
        ],
        "@typescript-eslint/no-namespace": "off",
        "@typescript-eslint/no-non-null-assertion": "error",
        "@typescript-eslint/no-parameter-properties": "off",
        "@typescript-eslint/no-shadow": "error",
        "@typescript-eslint/no-unused-expressions": "error",
        "@typescript-eslint/no-unused-vars": [
          "error",
          {
            "vars": "all",
            "args": "after-used",
            "ignoreRestSiblings": false
          }
        ],
        "@typescript-eslint/no-use-before-define": "error",
        "@typescript-eslint/no-floating-promises": "warn",
        "@typescript-eslint/prefer-function-type": "error",
        "@typescript-eslint/no-explicit-any": "error",
        "no-case-declarations": "off",
        "@typescript-eslint/unbound-method": [
          "error",
          {
            "ignoreStatic": true
          }
        ],
        "@typescript-eslint/no-unsafe-call": "off",
        "@typescript-eslint/quotes": [
          "error",
          {
            "avoidEscape": true
          }
        ],
        "@typescript-eslint/semi": [
          "error",
          "always"
        ],
        "@typescript-eslint/triple-slash-reference": [
          "error",
          {
            "path": "always",
            "types": "prefer-import",
            "lib": "always"
          }
        ],
        "no-console": [
          "error",
          {
            "allow": [
              "warn",
              "error"
            ]
          }
        ],
        "rxjs/no-unsafe-takeuntil": [
          "error",
          {
            "alias": [
              "untilDestroyed"
            ]
          }
        ],
        "rxjs/no-implicit-any-catch": "off",
        "@nrwl/nx/enforce-module-boundaries": [
          "error",
          {
            "enforceBuildableLibDependency": true,
            "allow": [],
            "depConstraints": [
              {
                "sourceTag": "*",
                "onlyDependOnLibsWithTags": [
                  "*"
                ]
              }
            ]
          }
        ]
      }
    },
    {
      "files": [
        "*.js",
        "*.jsx"
      ],
      "extends": [
        "plugin:@nrwl/nx/javascript"
      ],
      "rules": {}
    },
    {
      "files": [
        "*.spec.ts",
        "*.spec.tsx",
        "*.spec.js",
        "*.spec.jsx"
      ],
      "env": {
        "jest": true
      },
      "rules": {}
    }
  ]
}